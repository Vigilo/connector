[bus]
# Nom ou adresse IP du serveur AMQP à utiliser.
host = localhost

# Nom d'utilisateur à utiliser pour se connecter au bus.
user = connector

# Mot de passe associé
password = connector

# Chiffrement de la connexion
use_ssl = False

# Liste des noms des noeuds auxquels le connecteur est abonné,
# séparés par des virgules.
# Si la liste est vide, mettre uniquement une virgule.
subscriptions = /vigilo/command

# Logguer le trafic lié au bus
log_traffic = False

#-----------------------------------------
# Réglages pour un grand volume de données

# Nombre de messages de performance à envoyer dans un même message AMQP.
#  * avantage : augmente très largement le débit maximum
#  * inconvénient : si les messages de performance ne sont pas générés assez
#    vite, leur relai peut être retardé (on attend que le paquet soit plein)
# La valeur 0 ou 1 désactive cet envoi par paquets.
batch_send_perf = 1


[connector]
# Emplacement du fichier de sauvegarde local en cas de pannes.
backup_file = @LOCALSTATEDIR@/lib/vigilo/connector/backup.sqlite

# Nom de la table qui stocke les messages en attente à destination du bus.
backup_table_to_bus = tobus

# Nom de la table qui stocke les messages en attente en provenance du bus.
backup_table_from_bus = frombus

# Nom d'hôte utilisé pour signaler à Vigilo que ce connecteur fonctionne
# correctement. Cela doit correspondre au nom d'hôte configuré dans VigiConf
# pour cette machine. Par défaut, on utilise le nom d'hôte court (sans le
# domaine DNS)
#hostname = hostname

# Le noeud de publication à utiliser pour les messages d'état du connecteur.
# Par défaut, les noeuds définis dans la section [publications] sont utilisés.
#status_node = /vigilo/connectors-status

# La taille maximum de la file d'attente mémoire, à partir de laquelle :
# - si le connecteur est en réception du bus, il lui demande de ne plus lui
#   envoyer de messages
# - si le connecteur est en émission, il jettera les plus vieux messages
# Une limite à 50000 correspond à environ 1Go de RAM utilisé.
# La valeur par défaut est 0, ce qui désactive cette vérification.
#max_queue_size = 0


[publications]
# Noms des messages XML traités avec pour chaque type de message
# le nom du nœud XMPP sur lesquel les messages de ce type sont envoyés.
perf = vigilo.perf
state = vigilo.state
event = vigilo.event
command = vigilo.command


[loggers]
keys = root,twisted

[handlers]
keys = syslog,console,errors

[formatters]
keys = consoleFormatter,syslogFormatter

[logger_root]
level = INFO
handlers = syslog,console,errors

[logger_twisted]
level = WARNING
qualname = twisted
propagate = 0
handlers = syslog,console,errors

[handler_console]
class = StreamHandler
level = NOTSET
formatter = consoleFormatter
args = (sys.stdout,)

[handler_syslog]
class = handlers.SysLogHandler
level = NOTSET
formatter = syslogFormatter
args = '/dev/log', 'daemon'

[handler_errors]
level = ERROR
class = handlers.RotatingFileHandler
args = ('@LOCALSTATEDIR@/log/vigilo/connector/error.log', 'a', 1024*1024*10, 5)
formatter = consoleFormatter

[formatter_consoleFormatter]
format = [%(created)f] %(levelname)s::%(name)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter

[formatter_syslogFormatter]
format = %(processName)s[%(process)d]: %(levelname)s::%(message)s
datefmt =
class = vigilo.common.logging.VigiloFormatter
